// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/.prisma/client"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
    USER
    MENTOR
    SUPER_ADMIN
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                       String                     @id @default(cuid())
    name                     String?
    email                    String?                    @unique
    emailVerified            DateTime?
    image                    String?
    role                     Role                       @default(USER)
    accounts                 Account[]
    sessions                 Session[]
    LemonSqueezySubscription LemonSqueezySubscription[]

    plan         Plan?          @relation(fields: [planId], references: [id])
    planId       Int?
    FeatureUsage FeatureUsage[]

    Transactions MpesaTransaction[]
    Documents   Documents[]

    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @default(now()) @updatedAt
    oneTimePurchase OneTimePurchase[]
    mentorSessions  BookingSession[]  @relation(name: "MentorSessions")
    menteeSessions  BookingSession[]  @relation(name: "MenteeSessions")
}

model LemonSqueezyWebhookEvent {
    id              Int      @id @default(autoincrement())
    eventName       String
    processed       Boolean  @default(false)
    body            Json
    createdAt       DateTime @default(now())
    processingError String?
}

model LemonSqueezySubscription {
    id                                  Int       @id @default(autoincrement())
    lemonSqueezyId                      String    @unique
    orderId                             Int
    name                                String
    email                               String
    status                              String
    renewsAt                            DateTime?
    endsAt                              DateTime?
    trialEndsAt                         DateTime?
    isUsageBased                        Boolean   @default(false)
    isPaused                            Boolean   @default(false)
    customerId                          String
    variantId                           String
    customerPortalUrl                   String?
    updatePaymentMethodUrl              String?
    customerPortalUpdateSubscriptionUrl String?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OneTimePurchase {
    id             Int    @id @default(autoincrement())
    lemonSqueezyId String @unique
    orderId        Int
    name           String
    email          String
    status         String
    customerId     String
    variantId      String

    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model Plan {
    id                    Int    @id @default(autoincrement())
    lemonSqueezyVariantId String @unique
    name                  String

    // Paywalled features, this is the number of credits the user can spend on each feature per month

    buttonClicks Int?
    aiCalls      Int?
    fileUploads  Int?

    users User[] // This establishes the one-to-many relationship
}

model FeatureUsage {
    id           String @id @default(cuid())
    userId       String
    buttonClicks Int    @default(0)
    aiCalls      Int    @default(0)
    fileUploads  Int    @default(0)

    // Add more features as needed
    date DateTime @default(now())
    user User     @relation(fields: [userId], references: [id])

    @@unique([userId, date])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model BookingSession {
    id            String   @id @default(cuid())
    title         String
    description   String?
    startTime     DateTime
    endTime       DateTime
    status        String
    mentorId      String
    menteeId      String
    paymentStatus String
    meetingLink   String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @default(now()) @updatedAt

    mentor User @relation(name: "MentorSessions", fields: [mentorId], references: [id])
    mentee User @relation(name: "MenteeSessions", fields: [menteeId], references: [id])

    @@unique([mentorId, startTime])
}

model MpesaTransaction {
    id        String   @id @default(cuid())
    amount    Float
    phone     String
    mpesaCode String
    userId    String
    User      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Scholarship {
  id                      Int      @id @default(autoincrement())
  scholarshipName         String
  country                 String
  openingDates            String?
  deadline                String?
  courseOfStudyInformation String?
  link                    String?
}

model Documents {
    id          Int      @id @default(autoincrement())
    documentUrl String
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}